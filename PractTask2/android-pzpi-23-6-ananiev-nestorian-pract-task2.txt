МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




Звіт
з практичної роботи № 2 з дисципліни
Програмування під Android
   





Виконав:                                                                     Перевірив:
ст. гр. ПЗПІ-23-6                                                            ст. викладач кафедри ПІ
Ананьєв Несторіан Сергійович				                                 Сокорчук Ігор Петрович









Харків 2024
ЗАВДАННЯ

1.	Розмітка екрана
1.1.	Підготовка робочого середовища
1.2.	Практика з Linear/Constraint-Layout
1.3.	Практика з атрибутами елементів
1.4.	Обробка подій
2.	Файли розмітки Layout
2.1.	Створення різних Layout
2.2.	Практика роботи з атрибутами
3.	Життєвий цикл та методи Activity
3.1.	Ознайомлення з життєвим циклом Activity
3.2.	Дослідження методів життєвого циклу
3.3.	Вивчення поведінки Activity при зміні орієнтації екрана
3.4.	Практичне завдання з ручного збереження стану
3.5.	Дослідження переходу між Activity
3.6.	Обробка завершення Activity
4.	Додаткові завдання
4.1.	 Реалізувати застосунок, у якому стан користувача (наприклад, лічильник 
кліків) зберігається під час зміни орієнтації екрана.
4.2.	 Додати до застосунку таймер, який автоматично призупиняється при 
виклику методу onPause() і поновлюється після onResume().








ХІД РОБОТИ

1.	Розмітка екрана
   Відкриваємо Android Studio та створюємо новий проєкт, обравши шаблон 
Empty Views Activity. Відкриємо файл res/layout/activity_main.xml, код якого 
наведено у додатку А.
   Практика з LinearLayout: cтворюємо розмітку, що містить кілька кнопок, 
розташованих одна під одною. Використовуємо властивості orientation для 
вертикальної орієнтації. Задаємо для кожної кнопки властивості layout_width та 
layout_height, поекспериментуємо з різними значеннями, як wrap_content та 
match_parent та властивістю weight.
   Практика з ConstraintLayout: розміщуємо елементи на екрані, 
використовуючи обмеження для позиціонування, щоб задати їх взаємне 
розташування. 
   Практика з RelativeLayout: розміщуємо кілька елементів відносно один 
одного, використовуючи атрибути, такі як layout_below, layout_toRightOf.
   Практика з FrameLayout: додаємо декілька текстових полів, щоб побачити, 
як вони накладаються одне на одного.
   Практика з GridLayout: розмістимо елементи у вигляді таблиці, задаючи 
кількість стовпців і рядків.
   Використовуємо такі атрибути, як padding, margin, gravity та layout_gravity 
для налаштування відступів та вирівнювання елементів. 
   Обробка подій. Додаємо до кнопки обробник події натискання у файлі 
MainActivity.java.

У файлі activity_main.xml додаємо атрибути android:onClick="onButtonClick" та 
android:onClick="onButtonClick1" до кнопки, а в класі MainActivity створимо 
відповідні методи onButtonClick та onButtonClick1.

1 public void onButtonClick(View view) {
2     textView.setText("Text changed");
3 }
4 public void onButtonClick1(View view) {
5     Button button = (Button) view;
6     Toast.makeText(this, button.getText(), 
Toast.LENGTH_SHORT).show();
7 }

2.	Життєвий цикл та методи Activity
   Додамо до кожного методу життєвого циклу (onCreate, onStart, onResume 
тощо) функцію виведення повідомлень у лог (Log.d) для відстеження 
послідовності викликів. Наприклад:
1.	Log.d(TAG, "onCreate");
   Змінюємо орієнтацію пристрою (з портретної на ландшафтну) та 
спостерігаємо за викликами методів життєвого циклу у логах.
   Досліджуємо, як зміна орієнтації перезапускає Activity (викликаються 
методи onPause(), onStop(), onDestroy(), а потім onCreate(), onStart(), 
onResume()).
   Додаємо в Activity поле для введення тексту (наприклад, EditText). При зміні 
орієнтації екрана текст у полі буде очищено, оскільки Activity 
перезавантажується. Використаємо методи onSaveInstanceState() та 
onRestoreInstanceState() для збереження та відновлення стану при зміні 
орієнтації екрана:
   1 private static final String EDIT_TEXT_TEXT_KEY = 
"EDIT_TEXT_TEXT_KEY";
   2 
   3 @Override
   4 protected void onSaveInstanceState(@NonNull Bundle outState) {
   5     super.onSaveInstanceState(outState);
   6     outState.putString(EDIT_TEXT_TEXT_KEY, 
editText.getText().toString());
   7 }
   8 
   9 @Override
   10 protected void onRestoreInstanceState(@NonNull Bundle 
savedInstanceState) {
   11     super.onRestoreInstanceState(savedInstanceState);
   12     
editText.setText(savedInstanceState.getString(EDIT_TEXT_TEXT_KEY))
;
   13 }
   
   Створюємо друге Activity у нашому застосунку. Додаємо кнопку для 
переходу до другого Activity. Відстежуємо виклики методів життєвого циклу 
при переході між Activity.
   Додаємо кнопку для завершення Activity (виклик методу finish()).

1 public void finishActivity(View view) {
2     finish();
3 }
   
   У додатковому завданні було створено лічильник кліків, що зберігає стан 
користувача. 
   
1 private final String COUNTER_KEY = "COUNTER_KEY";
2 
3 private Button counterButton;
4 private int counter = 0;
5 
6 @Override
7 protected void onCreate(Bundle savedInstanceState) {
8     super.onCreate(savedInstanceState);
9     setContentView(R.layout.activity_counter);
10     if (savedInstanceState != null) {
11         counter = savedInstanceState.getInt(COUNTER_KEY);
12     }
13 }
14 
15 @Override
16 protected void onStart() {
17     super.onStart();
18     counterButton = findViewById(R.id.counter_button);
19     updateCounterText();
20 }
21 
22 @Override
23 protected void onSaveInstanceState(@NonNull Bundle outState) 
{
24     super.onSaveInstanceState(outState);
25     outState.putInt(COUNTER_KEY, counter);
26 }
	
   Також у додатковому завданні було створено таймер, який автоматично 
призупиняється при виклику методу onPause() і поновлюється після onResume()

1 @Override
2 protected void onStart() {
3     super.onStart();
4     timerTextView = findViewById(R.id.timer);
5 
6     updateTimer();
7     countDownTimer = new CountDownTimer(Long.MAX_VALUE, 1000) 
{
8         @Override
9         public void onTick(long millisUntilFinished) {
10             timerSeconds++;
11             updateTimer();
12         }
13 
14         @Override
15         public void onFinish() {
16 
17         }
18     };
19 }
20 
21 @Override
22 protected void onResume() {
23     super.onResume();
24     countDownTimer.start();
25 }
26 
27 @Override
28 protected void onPause() {
29     super.onPause();
30     countDownTimer.cancel();
31 }
 
ВИСНОВКИ
  Під час практичної роботи було досліджено: створення та налаштування 
різних розміток, використовуючи XML-файли. Виявлено, як компоненти та 
атрибути взаємодіють між собою.
  Ознайомилися із життєвим циклом компонентів Activity у застосунках 
Android. Навчилися керувати станами Activity через використання ключових 
методів життєвого циклу.
Відеозвіт на YouTube. URL: https://www.youtube.com/watch?v=rslWz_M9hIU

 
ВИКОРИСТАНІ ДЖЕРЕЛА

1.	Методичні вказівки до практичних занять: Розмітка екрана в Android. 
URL: https://dl.nure.ua/mod/page/view.php?id=599542 (дата звернення: 
29.11.2024)
2.	Методичні вказівки до практичних занять: Файли розмітки Layout. URL: 
https://dl.nure.ua/mod/page/view.php?id=599543 (дата звернення: 
29.11.2024)
3.	Методичні вказівки до практичного заняття: Життєвий цикл та методи 
Activity. URL: https://dl.nure.ua/mod/page/view.php?id=599544 (дата 
звернення: 29.11.2024)
 
ДОДАТОК А

Файл розмітки

1  <?xml version="1.0" encoding="utf-8"?>
2  <androidx.constraintlayout.widget.ConstraintLayout 
xmlns:android="http://schemas.android.com/apk/res/android"
3      xmlns:app="http://schemas.android.com/apk/res-auto"
4      xmlns:tools="http://schemas.android.com/tools"
5      android:layout_width="match_parent"
6      android:layout_height="match_parent"
7      tools:context=".MainActivity">
8
9      <LinearLayout
10         android:id="@+id/linear_layout_1"
11         android:layout_width="wrap_content"
12         android:layout_height="wrap_content"
13         android:gravity="center"
14         android:orientation="vertical"
15         android:padding="10dp"
16         app:layout_constraintStart_toStartOf="parent"
17         app:layout_constraintTop_toTopOf="parent">
18
19         <ImageView
20             android:layout_width="100dp"
21             android:layout_height="100dp"
22             android:src="@drawable/android" />
23
24         <TextView
25             android:id="@+id/text_view"
26             android:layout_width="wrap_content"
27             android:layout_height="wrap_content"
28             android:layout_marginTop="5dp"
29             android:text="TextView1"
30             android:textColor="@color/black"
31             android:textSize="18sp"
32             android:textStyle="bold"
33             app:layout_constraintBottom_toBottomOf="parent"
34             app:layout_constraintEnd_toEndOf="parent"
35             app:layout_constraintStart_toStartOf="parent"
36             app:layout_constraintTop_toTopOf="parent" />
37
38         <Button
39             android:layout_width="wrap_content"
40             android:layout_height="wrap_content"
41             android:layout_marginTop="15dp"
42             android:onClick="onButtonClick"
43             android:text="Button 1" />
44
45     </LinearLayout>
46
47     <LinearLayout
48         android:id="@+id/linear_layout_2"
49         android:layout_width="200dp"
50         android:layout_height="wrap_content"
51         android:orientation="vertical"
52         app:layout_constraintBottom_toBottomOf="parent"
53         app:layout_constraintEnd_toEndOf="parent"
54         
app:layout_constraintStart_toEndOf="@+id/linear_layout_1"
55         app:layout_constraintTop_toTopOf="parent">
56
57         <Button
58             android:layout_width="match_parent"
59             android:layout_height="wrap_content"
60             android:layout_marginTop="20dp"
61             android:backgroundTint="#03A9F4"
62             android:onClick="onButtonClick1"
63             android:text="Button 2" />
64
65         <Button
66             android:layout_width="match_parent"
67             android:layout_height="wrap_content"
68             android:backgroundTint="#03A9F4"
69             android:onClick="onButtonClick1"
70             android:text="Button 3" />
71
72         <Button
73             android:layout_width="wrap_content"
74             android:layout_height="wrap_content"
75             android:layout_gravity="end"
76             android:onClick="onButtonClick1"
77             android:backgroundTint="#03A9F4"
78             android:text="Button 4" />
79
80     </LinearLayout>
81
82     <GridLayout
83         android:layout_width="match_parent"
84         android:layout_height="wrap_content"
85         android:layout_marginTop="40dp"
86         android:columnCount="3"
87         android:rowCount="2"
88         
app:layout_constraintTop_toBottomOf="@+id/linear_layout_2">
89
90         <TextView
91             android:layout_width="wrap_content"
92             android:layout_height="wrap_content"
93             android:layout_rowWeight="1"
94             android:layout_columnWeight="1"
95             android:gravity="center"
96             android:text="1"
97             android:textColor="#4CAF50"
98             android:textSize="20sp"
99             android:textStyle="italic" />
100
101         <Button
102             android:layout_width="wrap_content"
103             android:layout_height="wrap_content"
104             android:layout_rowWeight="1"
105             android:layout_columnWeight="1"
106             android:gravity="center"
107             android:text="2"
108             android:onClick="onButtonClick1"
109             android:textSize="20sp"
110             android:textStyle="italic" />
111
112         <Button
113             android:layout_width="wrap_content"
114             android:layout_height="wrap_content"
115             android:layout_rowWeight="1"
116             android:layout_columnWeight="1"
117             android:gravity="center"
118             android:onClick="onButtonClick1"
119             android:text="3"
120             android:textSize="20sp"
121             android:textStyle="italic" />
122
123         <ImageView
124             android:layout_width="wrap_content"
125             android:layout_height="50dp"
126             android:adjustViewBounds="true"
127             android:layout_columnWeight="1"
128             android:layout_rowWeight="1"
129             android:src="@drawable/android" />
130
131         <TextView
132             android:layout_width="wrap_content"
133             android:layout_height="wrap_content"
134             android:layout_rowWeight="1"
135             android:layout_columnWeight="1"
136             android:gravity="end|center"
137             android:text="6"
138             android:layout_columnSpan="2"
139             android:textColor="#4CAF50"
140             android:textSize="20sp"
141             android:textStyle="italic" />
142
143     </GridLayout>
144
145 </androidx.constraintlayout.widget.ConstraintLayout>
1

