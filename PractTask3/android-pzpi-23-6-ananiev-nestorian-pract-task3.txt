МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




Звіт
з практичної роботи № 3 з дисципліни
Програмування під Android
   





Виконав:                                                      Перевірив:
ст. гр. ПЗПІ-23-6                                             ст. викладач кафедри ПІ
Ананьєв Несторіан Сергійович                                  Сокорчук Ігор Петрович








Харків 2024 
ЗАВДАННЯ

−	Ознайомитися з основними типами діалогових панелей в Android.
−	Навчитися створювати та використовувати діалогові панелі в Android-
застосунках.
−	Засвоїти методи для налаштування діалогових панелей та їх взаємодії з 
користувачем. 
−	Засвоїти концепцію черги повідомлень (Message Queue) в Android.
−	Вивчити роботу з обробником повідомлень (Handler) для взаємодії з 
потоками.
−	Навчитися створювати та використовувати Handler для асинхронної обробки 
даних.
−	Навчися працювати з компонентом RecyclerView для створення списків із 
прогортанням в Android
−	Ознайомитися їх з принципами створення та використання адаптерів 
(Adapters) і керування даними у списках. 
ХІД РОБОТИ

     Додаємо кнопку до основної розмітки (activity_main.xml), яка 
ініціюватиме показ діалогової панелі:

1 <Button
2     android:id="@+id/showDialogButton"
3     android:layout_width="wrap_content"
4     android:layout_height="wrap_content"
5     android:text="Show Dialog" />

     У файлі MainActivity.java реалізуємо логіку для показу AlertDialog:

1 Button showDialogButton = findViewById(R.id.showDialogButton);
2 showDialogButton.setOnClickListener(v -> new 
AlertDialog.Builder(MainActivity.this)
3         .setTitle("Діалог")
4         .setMessage("Це приклад AlertDialog.")
5         .setPositiveButton("OK", (dialog, which) -> {
6             Toast.makeText(this, "Натиснуто ОК", 
Toast.LENGTH_SHORT).show();
7         })
8         .setNegativeButton("Cancel", (dialog, which) -> {
9             Toast.makeText(this, "Натиснуто Cancel", 
Toast.LENGTH_SHORT).show();
10        })
11        .show());

     Додаємо кнопку для виклику DatePickerDialog:

1 <Button
2     android:id="@+id/showDatePickerButton"
3     android:layout_width="wrap_content"
4     android:layout_height="wrap_content"
5     android:text="Show DatePicker" />
     У MainActivity реалізуємо показ DatePickerDialog:

1 Button showDatePickerButton = 
findViewById(R.id.showDatePickerButton);
2 showDatePickerButton.setOnClickListener(v -> {
3     DatePickerDialog datePickerDialog = new 
DatePickerDialog(MainActivity.this,
4             (view, year, month, dayOfMonth) -> {
5                 Toast.makeText(
6                         this,
7                         "Обрано дату: " + dayOfMonth + "." + 
month + "." + year,
8                         Toast.LENGTH_SHORT
9                 ).show();
10            }, 2023, 8, 1);
11     datePickerDialog.show();
12 });

     Створимо новий XML-файл для індивідуальної діалогової панелі 
(custom_dialog.xml):

1 <?xml version="1.0" encoding="utf-8"?>
2 <LinearLayout 
xmlns:android="http://schemas.android.com/apk/res/android"
3     android:layout_width="wrap_content"
4     android:layout_height="wrap_content"
5     android:orientation="vertical"
6     android:padding="16dp">
7
8     <TextView
9         android:id="@+id/customDialogText"
10        android:layout_width="wrap_content"
11        android:layout_height="wrap_content"
12        android:text="Це індивідуальна діалогова панель" />
13
14     <EditText
15         android:id="@+id/customDialogInput"
16         android:layout_width="match_parent"
17         android:layout_height="wrap_content"
18         android:hint="Введіть текст" />
19
20 </LinearLayout>

     Реалізуємо показ Custom Dialog у MainActivity:

1 Button showCustomDialogButton = 
findViewById(R.id.showCustomDialogButton);
2 showCustomDialogButton.setOnClickListener(v -> {
3     LayoutInflater inflater = getLayoutInflater();
4     View dialogView = inflater.inflate(R.layout.custom_dialog, 
null);
5 
6     AlertDialog.Builder builder = new 
AlertDialog.Builder(MainActivity.this);
7     builder.setView(dialogView)
8             .setPositiveButton("OK", (dialog, id) -> {
9                 Toast.makeText(MainActivity.this, "Натиснуто 
ОК", Toast.LENGTH_SHORT).show();
10            })
11             .setNegativeButton("Cancel", (dialog, id) -> {
12                 Toast.makeText(MainActivity.this, "Натиснуто 
Cancel", Toast.LENGTH_SHORT).show();
13            });
14     builder.create().show();
15 });

     Перейдемо до обробнику черг повідомлень (Handler).  У класі 
MainActivity.java створимо об’єкт Handler та виведемо повідомлення у текстове 
поле через 2 секунди:

1 TextView textView = findViewById(R.id.handlerMessageTextView);
2 Handler handler = new Handler(Looper.getMainLooper());
3 
4 Button startDelayedHandlerButton = 
findViewById(R.id.startDelayedHandlerButton);
5 startDelayedHandlerButton.setOnClickListener(v -> {
6     handler.postDelayed(() -> textView.setText("Handler executed 
after delay"), 2000);
7 });

     Оновимо приклад для взаємодії з фоновим потоком, та будемо виводити 
повідомлення в текстове поле з нього.
     
      1 Button startBackgroundThreadButton = 
findViewById(R.id.backgroundThreadHandlerButton);
      2 startBackgroundThreadButton.setOnClickListener(v -> new 
Thread(() -> {
      3     try {
      4         Thread.sleep(3000);
      5     } catch (InterruptedException e) {
      6         e.printStackTrace();
      7     }
      8 
      9     handler.post(() -> textView.setText("Updated from 
background thread"));
      10 }).start());

     Оновимо приклад для використання об’єкта Message та виведемо це 
повідомлення у текстове поле: 
     
      1 Button sendMessageWithHandlerButton = 
findViewById(R.id.sendMessageWithHandlerButton);
      2 sendMessageWithHandlerButton.setOnClickListener(v -> {
      3     Handler handler1 = new Handler(Looper.getMainLooper()) {
      4         @Override
      5         public void handleMessage(Message msg) {
      6             textView.setText("Message received: " + 
msg.what);
      7         }
      8     };
      9 
      10    new Thread(() -> {
      11        try {
      12            Thread.sleep(2000);
      13        } catch (InterruptedException e) {
      14            e.printStackTrace();
      15        }
      16 
      17        Message msg = handler1.obtainMessage();
      18        msg.what = 1;
      19        handler1.sendMessage(msg);
      20    }).start();
      21 });

     Створимо фоновий потік за допомогою HandlerThread та виведемо 
повідомлення у текстове поле з нього:
     
      1 Button startHandlerThreadButton = 
findViewById(R.id.startHandlerThreadButton);
      2 startHandlerThreadButton.setOnClickListener(v -> {
      3     HandlerThread handlerThread = new 
HandlerThread("BackgroundThread");
      4     handlerThread.start();
      5     Handler backgroundHandler = new 
Handler(handlerThread.getLooper());
      6 
      7     backgroundHandler.post(() -> {
      8         try {
      9             Thread.sleep(4000);
      10        } catch (InterruptedException e) {
      11            e.printStackTrace();
      12        }
      13 
      14        handler.post(() -> textView.setText("Updated from 
HandlerThread"));
      15    });
      16 });


     Переходимо до роботи з RecyclerView.
     Додамо RecyclerView у activity_main.xml:

1 <androidx.recyclerview.widget.RecyclerView
2     android:id="@+id/recyclerView"
3     android:layout_width="match_parent"
4     android:layout_height="wrap_content"
5     android:paddingVertical="10dp" />

     Створимо новий клас MyAdapter, який буде спадкувати 
RecyclerView.Adapter. Створимо внутрішній клас ViewHolder, який буде 
спадкувати RecyclerView.ViewHolder, для збереження посилань на елементи 
інтерфейсу:

1 public static class ViewHolder extends RecyclerView.ViewHolder {
2     public TextView textView;
3 
4     public ViewHolder(View v) {
5         super(v);
6         textView = v.findViewById(R.id.textView);
7     }
8 }

     Реалізуємо методи onCreateViewHolder(), onBindViewHolder() і 
getItemCount() в адаптері:

1 @NonNull
2 @Override
3 public MyAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, 
int viewType) {
4     View v = LayoutInflater.from(parent.getContext())
5             .inflate(R.layout.list_item, parent, false);
6     return new ViewHolder(v);
7 }
8 
9 @Override
10 public void onBindViewHolder(ViewHolder holder, int position) {
11     holder.textView.setText(mData[position]);
12     holder.itemView.setOnClickListener(v -> {
13         Toast.makeText(
14                 holder.itemView.getContext(),
15                 "Item " + position + " clicked",
16                 Toast.LENGTH_SHORT
17         ).show();
18     });
19 }
20 
21 @Override
22 public int getItemCount() {
23     return mData.length;
24 }

Створимо макет для елементів списку:

1 <androidx.constraintlayout.widget.ConstraintLayout 
xmlns:android="http://schemas.android.com/apk/res/android"
2     xmlns:app="http://schemas.android.com/apk/res-auto"
3     android:layout_width="match_parent"
4     android:layout_height="wrap_content">
5
6     <TextView
7         android:id="@+id/textView"
8         android:layout_width="wrap_content"
9         android:layout_height="wrap_content"
10        android:gravity="center"
11        android:paddingVertical="10dp"
12        android:text="TextView"
13        android:textSize="18sp"
14        app:layout_constraintEnd_toStartOf="@+id/imageView"
15        app:layout_constraintHorizontal_bias="0.5"
16        app:layout_constraintStart_toStartOf="parent"
17        app:layout_constraintTop_toTopOf="parent" />
18
19     <ImageView
20         android:id="@+id/imageView"
21         android:layout_width="50dp"
22         android:layout_height="50dp"
23         android:src="@drawable/android"
24         app:layout_constraintEnd_toEndOf="parent"
25         app:layout_constraintHorizontal_bias="0.5"
26         app:layout_constraintStart_toEndOf="@+id/textView"
27         app:layout_constraintTop_toTopOf="parent" />
28
29 </androidx.constraintlayout.widget.ConstraintLayout>

     Підключимо RecyclerView до адаптера в MainActivity та налаштуємо 
LayoutManager для нього (наприклад, лінійний макет):

1 RecyclerView recyclerView = findViewById(R.id.recyclerView);
2 recyclerView.setLayoutManager(new LinearLayoutManager(this));
3 MyAdapter adapter = new MyAdapter(getDataSet());
4 recyclerView.setAdapter(adapter);

     Згенеруємо масив зі ста рядків для відображення їх у списку:

1 private String[] getDataSet() {
2     String[] dataSet = new String[100];
3     for (int i = 0; i < dataSet.length; i++) {
4         dataSet[i] = "String " + i;
5     }
6     return dataSet;
7 }

























ВИСНОВКИ

     Під час практичної роботи було створено застосунок для ознайомлення та 
опановування діалогових панелей; засвоєно концепції черги повідомлень, 
оброки подій Handler;  опрацьовано компонент RecyclerView для створення 
списків із прогортанням в Android та використання адаптерів (Adapters), 
керування даними у списках.
   Відеозвіт на YouTube. URL: https://www.youtube.com/watch?v=hL0IsS2jbXQ

 
ВИКОРИСТАНІ ДЖЕРЕЛА

1.	Документація AndroidDevelopers dialogs. URL: 
https://developer.android.com/develop/ui/views/components/dialogs (дата 
звернення: 29.11.2024)
2.	Документація AndroidDevelopers handlers. URL: 
https://developer.android.com/reference/android/os/Handler (дата звернення: 
29.11.2024)
3.	Документація AndroidDevelopers Recycler View. URL: 
https://developer.android.com/reference/androidx/recyclerview/widget/Recycle
rView (дата звернення: 29.11.2024)


1

